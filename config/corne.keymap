/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NUM 1
#define SYM 2
#define SYS 3
#define NAV 4
#define WM 5

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <280>;
            bindings = <&kp SPACE>, <&kp ENTER>;
        };
    };

// make a macro for every mod combination -_-
    macros {
        ZMK_MACRO(mod_one,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp N1>;
        )
        
        ZMK_MACRO(mod_two,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp N>;
        )
        
        ZMK_MACRO(mod_three,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp N3>;
        )
        
        ZMK_MACRO(mod_four,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp N4>;
        )
        
        ZMK_MACRO(mod_five,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp N5>;
        )
        
        ZMK_MACRO(mod_shift_one,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp LSHFT &kp N1>;
        )
        
        ZMK_MACRO(mod_shift_two,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp LSHFT &kp N2>;
        )
        
        ZMK_MACRO(mod_shift_three,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp LSHFT &kp N3>;
        )
        
        ZMK_MACRO(mod_shift_four,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp LSHFT &kp N4>;
        )
        
        ZMK_MACRO(mod_shift_five,
        wait-ms = <0>;
        tap-ms = <40>;
        bindings = <&kp LCMD &kp LSHFT &kp N5>;
        )
    };

    combos {
        compatible = "zmk,combos";
        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };
        
        combo_ltab {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };

        combo_lshift {
            timeout-ms = <80>;
            key-positions = <14 15>;
            bindings = <&kp RSHFT>;
        };

        combo_lcmd {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp RCMD>;
        };
        
        combo_lnum {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&mo 1>;
        };
        
        combo_lsym {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&mo 2>;
        };
        
        combo_lsys {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&mo 3>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp RALT>;
        };

        combo_rshift {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RSHFT>;
        };

        combo_rcmd {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp RCMD>;
        };

        combo_rnum {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&mo 1>;
        };
        
        combo_rsym {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&mo 2>;
        };

        combo_rsys {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&mo 3>;
        };

        combo_capslock {
            timeout-ms = <50>;
            key-positions = <19 20 21>;
            bindings = <&kp CAPS>;
        };
        
        combo_nav {
            timeout-ms = <50>;
            key-positions = <14 15 16>;
            bindings = <&tog NAV>;
        };
        
        panic_button {
            timeout-ms = <50>;
            key-positions = <20 21 22>;
            bindings = <&tog BASE>;
        };
        
        left_mod_shift {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LCMD &kp LSHFT>;
        };
        
        right_mod_shift {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp RCMD &kp RSHFT>;
        };
        
        left_wm { // layer
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&mo 5>;
        };
        
        right_wm { // layer
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&mo 5>;
        };
        
    };



        keymap {
                compatible = "zmk,keymap";

                BASE {

                        bindings = <
//        0 ' "    1     2     3     4       5     6      7      8      9  ; :  10      11   
        &none  &kp FSLH  &kp I &kp G &kp R &kp P   &kp Y &kp D  &kp O  &kp M   &kp SEMI &none  
//       12       13    14    15    16      17    18     19     20      21      22      23 
        &none  &kp Z    &kp S &kp E &kp A &kp F   &kp B &kp T  &kp N  &kp H   &kp Q    &none  
//       24 !     25    26    27    28      29    30     31     32      33/ ?   34      35
        &none  &kp EXCL &kp X &kp C &kp V &kp J   &kp K &kp L  &kp W  &kp U   &kp SQT  &none  
//               36     37      38         39       40      41                 
             &kp LCTRL &td0 &kp COMMA     &kp DOT &kp BSPC &kp RCTRL
                     
                     
                     >;
            };
            
                NUM {
                        bindings = <
   /*                /        1           2           3        -                 F1        F2         F3         F4        F5 */
          &none  &kp FSLH   &kp N1     &kp N2     &kp N3    &kp KP_MINUS     &kp F1    &kp F2     &kp F3     &kp F4    &kp F5   &none  
         /*          .        4           5           6        +                 F6        F7         F8         F9        F10  */
          &none  &kp DOT     &kp N4     &kp N5     &kp N6    &kp KP_PLUS      &kp F6    &kp F7     &kp F8     &kp F9    &kp F10  &none  
         /*          *        7           8           9        =                F11        F12                                 */
          &none  &kp STAR  &kp N7    &kp N8     &kp N9     &kp EQUAL        &kp F11   &kp F12    &trans     &trans     &trans    &none  
                                                    /*   0                      */
                                              &trans &kp N0 &trans             &trans &trans &trans
                           >;
             };

                SYM {
                        bindings = <
         /*                       [           {          (          *              ~          )           }        ]         */
             &none  &trans    &kp LBKT   &kp LBRC   &kp LPAR  &kp ASTRK      &kp TILDE  &kp RPAR    &kp RBRC  &kp RBKT   &trans  &none  
           /*             |       @           #           -         <              >          _           $        /           `  */
             &none  &kp PIPE  &kp AT     &kp HASH   &kp KP_MINUS &kp LT      &kp GT     &kp UNDER   &kp DOLLAR &kp FSLH  &kp GRAVE  &none  
           /*                     %           ^           &                                   +           =        \        */   
             &none  &trans    &kp PRCNT  &kp CARET  &kp AMPS   &trans        &trans    &kp KP_PLUS  &kp EQUAL &kp BSLH   &trans  &none  
                       /*                                                             */
                                                    &none  &trans &trans    &trans &trans  &none  
                        >;
                };
                
               
               SYS {
                        bindings = <
            &none  &trans      &kp C_VOL_DN    &kp C_MUTE         &kp C_VOL_UP     &trans             &kp DEL       &kp HOME   &kp UP    &kp PG_UP   &trans     &none  
            
            &none  &bt BT_NXT  &kp C_PREV      &kp C_PLAY_PAUSE   &kp C_NEXT       &trans             &kp C_AL_CALC &kp LEFT   &kp DOWN  &kp RIGHT   &bt BT_NXT &none  
                     
            &none  &trans      &kp C_BRI_DN    &trans             &kp C_BRI_UP     &bt BT_CLR         &bt BT_CLR    &kp END    &kp PSCRN &kp PG_DN   &trans     &none  
                                                       &trans &trans &trans                         &trans &trans &trans
                        
                        
                        >;
                   };
               
               NAV {
                        bindings = <

          &none  &trans  &trans  &trans  &trans   &trans       &trans   &trans     &kp UP     &trans    &trans  &none  

          &none  &trans  &trans  &trans   &trans  &trans       &trans   &kp LEFT   &kp DOWN   &kp RIGHT &trans  &none  

          &none  &trans  &trans  &trans  &trans   &trans       &trans  &trans      &trans     &trans    &trans  &none  

                                &trans &td0 &trans      &trans &kp BSPC &trans
                        
                        >;
                   };
                   
               WM {
                        bindings = <

          &none  &trans  &mod_one    &mod_two   &mod_three   &trans           &trans  &mod_shift_one    &mod_shift_two    &mod_shift_three    &trans  &none  

          &none  &trans  &mod_four   &mod_five  &trans       &trans           &trans  &mod_shift_four   &mod_shift_five   &trans              &trans  &none  

          &none  &trans  &trans  &trans  &trans   &trans                      &trans  &trans             &trans     &trans                  &trans  &none  

                             &trans &trans &trans       &trans &trans &trans
                        
                        >;
                   };
        };
};

